; resource - config file
; Should be used with orx v.1.5+


; --- Config includes ---

; Including the spritesheet config data that was generated by the awesome TexturePacker, courtesy of Andreas LÃ¶w,
; from the non-less awesome art made by danc of www.lostgarden.com.
@spritesheet.ini@


; --- Viewports and cameras ---

[Viewport]
Camera          = Camera

[Camera]
FrustumWidth    = @Display.ScreenWidth
FrustumHeight   = @Display.ScreenHeight
FrustumFar      = 2
Position        = (0, 0, -1)


; --- Objects ---

; Scene is the only object referenced in code.
; No direct interaction is made in code with it either: the code simply creates it and forgets about it.
; All the children defined here have "behaviors" created in config.
; The only interaction made in code will be picking the object under the mouse cursor when the input "Action" is activated.
; If that object has a config property named "OnClickTrack", code will then add the timeline track to it.
; Similar process happens with the property "OnReleaseTrack" but it's not used in this demo.
[Scene]
ChildList       = RenamePatch #                           ; Patch "reminder" text.
                  Background #                            ; Background surface (a mere pretext for having a shader in background).
                  Cursor #                                ; Object that'll replace the mouse cursor.
                  Chest #                                 ; Chest object, with "scripted" sequence.
                  Gem # CompileGemShader #                ; Gem object + fake object to trigger shader compilation at the beginning to prevent any hiccup when activating it.
                  Music                                   ; Music object, display current music track + handling track switching.


[RenamePatch]
Graphic         = @                                       ; @ is a special identifier that is replaced by the name of the current section. Kinda similar to a "self" keyword.
Text            = @
Pivot           = bottom center
String          = Rename data/patch/patch-rename.ini to data/patch/patch.ini to override some settings.
Position        = (0, -350, -0.5)
Color           = (255, 0, 0)
LifeTime        = 10

[Background]
Graphic         = @
Texture         = pixel
Pivot           = center
ParentCamera    = Camera
Scale           = 1
Position        = (0, 0, 1)
Color           = (100, 100, 100)
ShaderList      = @
; Pretty simple shader using polar coordinates to display a striped tube with some sine deformation.
Code            = "
void main()
{
  float a, r, f;
  vec2  vPos    = -1.0 + 2.0 * (gl_TexCoord[0].xy);

  a             = atan(vPos.y, vPos.x);
  r             = sqrt(dot(vPos, vPos));
  a            += 0.2 * sin(2.0 / r + 5.0 * sin(0.5 * time));
  f             = sin(10.0 * a + r);
  f             = smoothstep(-0.5, 0.5, f);

  gl_FragColor  = vec4(mix(vec3(0.0), color / vec3(255.0), f), 1.0);
}"
ParamList       = time # color
time            = time                                    ; "time" is a keyword recognized by orx: the parameter value will be the object's "age", in seconds.
color           = @Background.Color                       ; Reusing the color defined in Background.Color

[Cursor]
Spawner         = @                                       ; No visual for this object: it's a simple spawner.
Object          = Particle
WaveSize        = 2
WaveDelay       = 0.01
TrackList       = CursorTrack                             ; This track is actually responsible for moving it "under" the mouse cursor.

[Particle]
Graphic         = Star                                    ; Particles spawned under the cursor are Stars from the spritesheet.
AngularVelocity = -90 ~ 90
Position        = (-15, -15, 0) ~ (15, 15, 0)
Scale           = 0.1
LifeTime        = 0.8
FXList          = @
SlotList        = ParticleShrinkFX                        ; And they shrink over time.

[Star]
Pivot           = center                                  ; Overriding Star's pivot (it's originally defined in spritesheet.ini that was generated by TexturePacker).

[Chest]
Graphic         = Chest Open
Position        = (-350, -150, 0.5)
ChildList       = ChestLid                                ; Let's add a lid to our open chest

[ChestLid]
Graphic         = Chest Lid
Position        = (0, 0, -0.1)
TryNumber       = 3
OnClickTrack    = PokeChestTrack                          ; Let's add a "behavior" to that lid when "clicking" on it.

[ChestKey]
ChildList       = Key # Explosion                         ; Let's add some "explosion" to that chest key.
LifeTime        = 1

[Key]
Graphic         = Key
Speed           = (0, -1000, 0)
FXList          = @
SoundList       = Boink
SlotList        = StopFX # FadeOutFX

[Explosion]
Spawner         = @
WaveSize        = 10
WaveDelay       = 0.01
Position        = (25, 45, 0)
TotalObject     = 25
Object          = ExplosionParticle

[ExplosionParticle@Particle]                              ; Reusing the same particle as the cursor one, with a couple of tweaks.
Scale           = 0.2 ~ 0.3
Speed           = (-2000, -100, 0) ~ (2000, -1000, 0)
LifeTime        = 1.0
FXList          = @
SlotList        = StopFX # FadeOutFX

[Gem]
Graphic         = Gem Blue
Position        = (-45, -150, 0.5)
TrackList       = GemInitTrack
OnClickTrack    = GemShaderTrack
; Here's another simple shader using polar coordinates to display a "rotating" checkered tube on top a greyed gem.
; Note that the shader is *not* directly referenced by this object (ShaderList property), so it won't get added to it upon creation.
Code            = "
void main()
{
  float a, r, f;
  vec4  vColor, vBW;
  vec3  vCoef = vec3(0.299, 0.587, 0.114);
  vec2  vTL   = vec2(texture_left, texture_top);
  vec2  vBR   = vec2(texture_right, texture_bottom);
  vec2  vPos  = -1.0 + 2.0 * (gl_TexCoord[0].xy - vTL) / (vBR - vTL);

  vColor  = texture2D(texture, gl_TexCoord[0].xy);
  vBW     = vec4(vec3(smoothstep(0.3, 0.6, dot(vColor.rgb * vCoef, vec3(1.0, 1.0, 1.0)))), vColor.a);

  a   = atan(vPos.y, vPos.x);
  a  += sin(r + time);
  r   = sqrt(dot(vPos, vPos));
  f   = sin(20.0 * r + 10.0 * sin(1.5 * time));
  f  *= sin(10.0 * a + 10.0 * sin(time));
  f   = smoothstep(-0.5, 0.5, f);

  gl_FragColor = mix(vColor, vBW, f);}
"
UseCustomParam  = true
ParamList       = texture # time
time            = time

[CompileGemShader]                                        ; This object will simply trigger the compilation of the shader defined in Gem and get deleted immediately after.
ShaderList      = Gem
LifeTime        = 0

[Music]                                                   ; This object displays a simple text containing the name of the current playing track.
Graphic         = @
Smoothing       = false
BlendMode       = add
Color           = (64, 192, 128)
Pivot           = center
Text            = @
String          =
Scale           = 3
Position        = (320, -40, 0)
TrackList       = MusicTrack                              ; This track is executed at creation and will update the name displayed by this object.
OnClickTrack    = SwitchMusicTrack                        ; This track handles interactions and will switch to the next track.
MusicList       = GBLoop # Alpha # OFF


; --- Sounds (samples) and musics (streams) ---

[GBLoop]                                                  ; A short music loop, composed by Mochi.
Music           = gbloop.ogg
Loop            = 1

[Alpha]                                                   ; Another short music loop, still by Mochi.
Music           = alpha.ogg
Loop            = 1
Volume          = 0.5

[Beep]                                                    ; A beep sound effect, by Mochi.
Sound           = bip.ogg
Pitch           = 0.8 ~ 1.2

[NudgeSound]                                              ; A sound effect by qubodup, found on opengameart.org
Sound           = jumpland.ogg
Pitch           = 0.8 ~ 1.5

[Boink]                                                   ; Another sound effect by qubodup, also found on opengameart.org
Sound           = jump.ogg
Pitch           = 0.9 ~ 1.2


; --- FXs ---

; Here are some FXs whose names are (hopefully) self explanatory.
[ParticleShrinkFX]
Type            = scale
Curve           = linear
StartTime       = 0.25
EndTime         = @Particle.LifeTime
StartValue      = 1
EndValue        = 0.01

[WobbleFX]
SlotList        = @
Type            = position
Curve           = triangle
StartTime       = 0
EndTime         = 0.3
Period          = 0.1
StartValue      = (0, 0, 0)
EndValue        = (0, -5, 0)

[StopFX]
Type            = speed
Curve           = linear
StartTime       = 0.1
EndTime         = 0.1
StartValue      = (0, 0, 0)
EndValue        = (0, 0, 0)
Absolute        = true

[FadeOutFX]
Type            = alpha
Curve           = smooth
StartTime       = 0.25
EndTime         = @ChestKey.LifeTime
StartValue      = 0
EndValue        = -1


; --- Tracks ---

[CursorTrack]                                             ; This track is responsible for moving the owner object "under" the mouse cursor.
0               = > Mouse.GetPosition                   # ; Gets mouse's cursor position (screen space) and push it on the stack.
                  > Render.GetWorldPosition <           # ; Pops it from the stack, getg its value in world space and then pushes it on the stack.
                  > + < (0,0,0.01)                      # ; Pops it, adds a slight offset on Z to make sure it'll be in camera's frustum and pushes it.
                    Object.SetPosition ^ <                ; Pops the final position and updates the owner object with it.
Loop            = True                                    ; Let's do that again next frame!

[PokeChestTrack]                                          ; This track is run on the Chest Lid when we interact with it.
0               = > Object.GetName ^                    # ; Pushes owner's name.
                  > Config.GetValue < TryNumber         # ; Gets config property TryNumber in owner's name section, pushes it.
                  > - < 1                               # ; Decrements it, push.
                  > Object.GetName ^                    # ; Get's owner's name.
                  > Config.SetValue < TryNumber <       # ; Re-gets its TryNumber original value (we do that in order to have the right sequence on the stack).
                  > == < 0                              # ; No more tries?
                    EvalIf < "Object.AddTrack ^ OpenChestTrack" "Object.AddTrack ^ NudgeChestTrack" ; If no more tries, adds OpenChestTrack to owner, otherwise adds NudgeChestTrack.

[NudgeChestTrack]                                         ; Let's nudge that chest lid!
0               =  Object.AddSound ^ NudgeSound         # ; Plays nudge sound on owner.
                   Object.AddFX ^ WobbleFX                ; Adds some visual FX to it.

[OpenChestTrack]                                          ; Let's open that chest!
0               = > Object.GetPosition ^ true           # ; Pushes current lid's position.
                  > Object.Create ChestKey              # ; Creates the chest's content (key + explosion).
                  > Object.SetPosition < <              # ; Moves it where the lid was.
                  > Object.GetPosition ^                # ; Pushes the chest lid position again.
                  > + < (0,0,10)                        # ; Send it far away in the background (outside camera frustum).
                    Object.SetPosition ^ <                ; Applies this new position to the lid. Be gone, lid!

1.5             = > Object.GetName ^                    # ; 1.5 seconds later, let's get the owner's name (ChestLid).
                    Config.SetValue < TryNumber 3       # ; And resets its try counter to 3.
                  > Object.GetPosition ^                # ; Gets its position.
                  > + < (0,0,-10)                       # ; Moves it back to where it was before opening.
                    Object.SetPosition ^ <                ; Applies position.

[GemInitTrack]                                            ; This track runs when the Gem is created.
0               =   Config.SetValue RunTime Shader false  ; Sets a boolean in config RunTime.Shader to false to track the current status of the shader.

[GemShaderTrack]                                          ; Let's interact with that Gem shader!
0               = >>Object.GetName ^                    # ; Gets its owner's name and push it twice.
                  > Config.GetValue RunTime Shader      # ; Gets the value of our "shader tracking" boolean.
                  >>not <                               # ; Inverts it: false<->true, and pushes it twice.
                    Config.SetValue RunTime Shader <    # ; Stores it back to config.
                    Object.AddSound ^ Beep              # ; Adds a sound effect, for the kick.
                    EvalIf < "Object.AddShader ^ <" "Object.RemoveShader ^ <" ; And finally decides if we should remove or add the shader based on the new value of our tracking boolean.

[MusicTrack]                                              ; This track is run when the Music object is created.
0               =   Config.SetValue RunTime Music 0     # ; Stores 0 in config RunTime.Music. We'll use that at the index of the track that's currently playing.
                    Object.AddTrack ^ UpdateMusicTrack    ; Updates owner's: this will both play the "current" track and update the text display.

[UpdateMusicTrack]                                        ; This track is called from either MusicTrack (creation) or SwitchMusicTrack (interaction).
0               = > Config.GetValue RunTime Music       # ; Gets current track index from config.
                  > Object.GetName ^                    # ; Gets owner's name.
                  >>Config.GetValue < MusicList <       # ; Reads the track name stored in owner's config section (property name MusicList) at the given (current) index.
                    Object.SetText ^ "Music: <"         # ; Updates owner's text to display "Music: <name of track playing>".
                    Object.AddSound ^ <                   ; Adds the music track to the owner's object.

[SwitchMusicTrack]                                        ; Let's switch to the next music track!
0               = > Config.GetValue RunTime Music       # ; Gets current playing track index.
                  > Object.GetName ^                    # ; Gets owner's name.
                  > Config.GetValue < MusicList <       # ; Gets the name of the current playing track.
                    Object.RemoveSound ^ <              # ; And removes it from our owner. Music, stop!
                  >>Config.GetValue RunTime Music       # ; Gets the current playing track again, pushes it twice.
                  > Object.GetName ^                    # ; Gets the owner's name, again.
                  > Config.GetListCounter < MusicList   # ; Gets the number of tracks defined in owner's config section.
                  > + < -1                              # ; Decrements the number of tracks (to get the actual index of the last track).
                  > == < <                              # ; Were we playing that last track?
                  > EvalIf < "+ 0 0" "+ < 1"            # ; If so, go back to track index 0, otherwise increments current track index.
                    Config.SetValue RunTime Music <     # ; Updates the track index in config.
                    Object.AddTrack ^ UpdateMusicTrack    ; And, finally, updates the owner's object to both play the track and display its name.


; --- Hook for future config patch ---

; This include doesn't do anything for now but is a hook for an eventual future patch.
; For that, we'll simply override all the config properties defined so far in a file named patch.ini.
@patch.ini@
